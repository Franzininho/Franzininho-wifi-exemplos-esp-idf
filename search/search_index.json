{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Primeiros Passos Este documento tem como objetivo ajud\u00e1-lo a configurar o ESP-IDF (Espressif IoT Development Framework) para trabalhar com a Franzininho WiFi que usa o ESP32-S2 da Espressif. Ao final, faremos um exemplo simples para compilar, gravar e monitorar usando o ESP-IDF, assim, garantiremos que tudo estar\u00e1 funcionando. Introdu\u00e7\u00e3o Para essa configura\u00e7\u00e3o, vamos instalar o ESP-IDF e us\u00e1-lo atrav\u00e9s de linha de comando. Caso voc\u00ea queira usar o IDF integrado a ambientes de desenvolvimento integrado (IDE) como VScode e Eclipse, confira os seguintes links: Eclipse Plugin VS Code Extension Voc\u00ea poder\u00e1 instalar o ESP-IDF no seu sistema operacional preferido (Linux, Windows, macOS). Para a experi\u00eancia completa, voc\u00ea precisar\u00e1 de uma placa Franzininho WiFi, Computador: com Windows, Linux ou macOS Passo 1 - Instala\u00e7\u00e3o dos pr\u00e9-requisitos Algumas ferramentas precisam ser instaladas no computador antes de prosseguir para as pr\u00f3ximas etapas. Siga os links abaixo para obter as instru\u00e7\u00f5es para o seu sistema operacional: Windows Linux Mac OS \u00c9 muito importante a instala\u00e7\u00e3o de todos os pr\u00e9-requisitos. Passo 2 - Instala\u00e7\u00e3o do ESP-IDF Nessa etapa vamos instalar o ESP-IDF e conjunto de ferramentas e bibliotecas. Vamos usar o c\u00f3digo mantido pela Espressif no reposit\u00f3rio do ESP-IDF O ESP-IDF \u00e9 o framework oficial da Espressif para o desenvolvimento de aplica\u00e7\u00f5es parar toda a fam\u00edlia ESP32. O procedimento apresentado aqui servir\u00e1 para trabalhar com toda a fam\u00edlia ESP32. Por\u00e9m, vamos dar foco ao ESP32-S2 que \u00e9 usado na Franzininho WiFi. Linux e macOS Abra o terminal e execute: mkdir -p ~/esp cd ~/esp git clone --recursive https://github.com/espressif/esp-idf.git O ESP-IDF ser\u00e1 baixado no seguinte reposit\u00f3rio ~/esp/esp-idf . Windows Al\u00e9m de instalar as ferramentas, o ESP-IDF Tools Installer para Windows apresentado no passo 1 ele tamb\u00e9m baixa uma c\u00f3pia do ESP-IDF. Dessa forma voc\u00ea n\u00e3o precisar\u00e1 baixar o ESP-IDF agora, se j\u00e1 tiver baixado anteriormente junto aos pr\u00e9-requisitos. Se desejar fazer o download do ESP-IDF sem a ajuda do ESP-IDF Tools Installer, consulte estas instru\u00e7\u00f5es . Instalando O ESP-IDF e ferramentas Al\u00e9m do ESP-IDF, voc\u00ea tamb\u00e9m precisa instalar as ferramentas usadas pelo ESP-IDF, como compilador, depurador, pacotes Python, etc. Windows O ESP-IDF Tools Installer para Windows apresentado no passo 1 instala todas as ferramentas necess\u00e1rias. Se voc\u00ea deseja instalar as ferramentas sem a ajuda do ESP-IDF Tools Installer, abra o Prompt de Comando e siga estas etapas: cd %userprofile%\\esp\\esp-idf install.bat Ou no Windows PowerShell cd ~/esp/esp-idf ./install.ps1 Linux e macOS No Linux ou macOS h\u00e1 um script para instala\u00e7\u00e3o.Abra o terminal e execute: cd ~/esp/esp-idf ./install.sh Configurando as vari\u00e1veis de ambientes As ferramentas instaladas ainda n\u00e3o foram adicionadas \u00e0 vari\u00e1vel de ambiente PATH. Para tornar as ferramentas utiliz\u00e1veis na linha de comando, algumas vari\u00e1veis de ambiente devem ser definidas. ESP-IDF fornece alguns scripts que ajudam nesse processo. Windows O ESP-IDF Tools Installer para Windows cria um atalho \u201cESP-IDF Command Prompt\u201d no menu Iniciar. Este atalho abre o Prompt de Comando e configura todas as vari\u00e1veis de ambiente necess\u00e1rias. Voc\u00ea pode abrir este atalho e prosseguir para a pr\u00f3xima etapa. Caso n\u00e3o funcione e voc\u00ea precise configurar manualmente, execute os seguintes comandos: Prompt de Comando : %userprofile%\\esp\\esp-idf\\export.bat Windows PowerShell : .$HOME/esp/esp-idf/export.ps1 Linux e macOS No terminal execute: . $HOME/esp/esp-idf/export.sh Voc\u00ea precisa fazer isso toda vez que iniciar o terminal para usar o ESP-IDF. Passo 3 - Criando um novo projeto Agora que j\u00e1 temos as ferramentas instaladas, vamos fazer um exemplo para validar o funcionamento das mesmas. Vamos executar o exemplo blink que j\u00e1 vem no IDF. Copiando um projeto exemplo Vamos copiar o projeto blink para preservarmos o exemplo presente na pasta do IDF: Windows cd %userprofile%\\esp xcopy /e /i %IDF_PATH%\\examples\\get-started\\blink blink Linux e macOS cd ~/esp cp -r $IDF_PATH/examples/get-started/blink . Fique a vontade para testar os outros exemplos tamb\u00e9m. O sistema de compila\u00e7\u00e3o ESP-IDF n\u00e3o oferece suporte a espa\u00e7os nos caminhos para o ESP-IDF ou para projetos. Configura\u00e7\u00e3o Agora vamos configurar o target para qual ser\u00e1 compilado e j\u00e1 fazer uma configura\u00e7\u00e3o no menuconfig. No nosso caso vamos trabalhar com o ESP32-S2: Windows cd %userprofile%\\esp\\blink idf.py set-target esp32s2 idf.py menuconfig Linux e macOS cd ~/esp/blink idf.py set-target esp32s2 idf.py menuconfig Ser\u00e1 aberto o menuconfig: Acesse a op\u00e7\u00e3o Component config ---> Em seguida ESP System Settings ---> Agora selecione Channel for console output (Default: UART0) ---> E por fim, selecione (X) USB CDC: Salve(S), Enter, enter, Saia do menu(ESC) Essa configura\u00e7\u00e3o permitir\u00e1 que usemos a USB no pr\u00f3ximo upload. Sempre que iniciar um projeto novo fa\u00e7a essas configura\u00e7\u00e3o para que continue usando a USB como interface de programa\u00e7\u00e3o. Para mais detalhes acesse: Compilando o projeto em modo DFU A primeira compila\u00e7\u00e3o n\u00f3s vamos fazer usando o modo DFU, que j\u00e1 vem por padr\u00e3o no ESP32-S2 permitindo o upload atrav\u00e9s da USB: Para crie a imagem DFU: idf.py dfu A primeira compila\u00e7\u00e3o pode demorar um pouco. Da at\u00e9 pra ir pegar um caf\u00e9 ;) Ap\u00f3s a compila\u00e7\u00e3o, conecte a Franzininho WiFi no computador. Antes de fazermos o upload \u00e9 necess\u00e1rio entrar no modo DFU. Para entrar no modo DFU pressione as teclas na seguinte sequencia: pressione e segure a tecla BOOT pressione rapidamente e solte a tecla presente solte a tecla BOOT Dessa forma a placa entrar\u00e1 no modo DFU e poder\u00e1 receber o firmware atrav\u00e9s da USB. Para fazer a grava\u00e7\u00e3o, digite: idf.py dfu-flash Caso tenha permiss\u00e3o de acesso a porta USB, acesse esse link com as instru\u00e7\u00f5es de configura\u00e7\u00f5es Ap\u00f3s alguns segundos a placa estar\u00e1 gravada. Compila\u00e7\u00e3o, grava\u00e7\u00e3o e monitor em modo normal Agora voc\u00ea poder\u00e1 compilar, gravar e monitorar usando a porta USB. Esse processo \u00e9 id\u00eantico ao que fazemos para desenvolver com o ESP32: Compilar: idf.py build Gravar: idf.py -p PORT [-b BAUD] flash Monitorar: idf.py -p /dev/ttyUSB0 monitor Maravilha, voc\u00ea configurou o ambiente para trabalhar com o ESP-IDF. Caso queira trabalhar com a extens\u00e3o para VSCODE, confira o video:","title":"Primeiros passos"},{"location":"#primeiros-passos","text":"Este documento tem como objetivo ajud\u00e1-lo a configurar o ESP-IDF (Espressif IoT Development Framework) para trabalhar com a Franzininho WiFi que usa o ESP32-S2 da Espressif. Ao final, faremos um exemplo simples para compilar, gravar e monitorar usando o ESP-IDF, assim, garantiremos que tudo estar\u00e1 funcionando.","title":"Primeiros Passos"},{"location":"#introducao","text":"Para essa configura\u00e7\u00e3o, vamos instalar o ESP-IDF e us\u00e1-lo atrav\u00e9s de linha de comando. Caso voc\u00ea queira usar o IDF integrado a ambientes de desenvolvimento integrado (IDE) como VScode e Eclipse, confira os seguintes links: Eclipse Plugin VS Code Extension Voc\u00ea poder\u00e1 instalar o ESP-IDF no seu sistema operacional preferido (Linux, Windows, macOS). Para a experi\u00eancia completa, voc\u00ea precisar\u00e1 de uma placa Franzininho WiFi, Computador: com Windows, Linux ou macOS","title":"Introdu\u00e7\u00e3o"},{"location":"#passo-1-instalacao-dos-pre-requisitos","text":"Algumas ferramentas precisam ser instaladas no computador antes de prosseguir para as pr\u00f3ximas etapas. Siga os links abaixo para obter as instru\u00e7\u00f5es para o seu sistema operacional: Windows Linux Mac OS \u00c9 muito importante a instala\u00e7\u00e3o de todos os pr\u00e9-requisitos.","title":"Passo 1 - Instala\u00e7\u00e3o dos pr\u00e9-requisitos"},{"location":"#passo-2-instalacao-do-esp-idf","text":"Nessa etapa vamos instalar o ESP-IDF e conjunto de ferramentas e bibliotecas. Vamos usar o c\u00f3digo mantido pela Espressif no reposit\u00f3rio do ESP-IDF O ESP-IDF \u00e9 o framework oficial da Espressif para o desenvolvimento de aplica\u00e7\u00f5es parar toda a fam\u00edlia ESP32. O procedimento apresentado aqui servir\u00e1 para trabalhar com toda a fam\u00edlia ESP32. Por\u00e9m, vamos dar foco ao ESP32-S2 que \u00e9 usado na Franzininho WiFi.","title":"Passo 2 - Instala\u00e7\u00e3o do ESP-IDF"},{"location":"#linux-e-macos","text":"Abra o terminal e execute: mkdir -p ~/esp cd ~/esp git clone --recursive https://github.com/espressif/esp-idf.git O ESP-IDF ser\u00e1 baixado no seguinte reposit\u00f3rio ~/esp/esp-idf .","title":"Linux e macOS"},{"location":"#windows","text":"Al\u00e9m de instalar as ferramentas, o ESP-IDF Tools Installer para Windows apresentado no passo 1 ele tamb\u00e9m baixa uma c\u00f3pia do ESP-IDF. Dessa forma voc\u00ea n\u00e3o precisar\u00e1 baixar o ESP-IDF agora, se j\u00e1 tiver baixado anteriormente junto aos pr\u00e9-requisitos. Se desejar fazer o download do ESP-IDF sem a ajuda do ESP-IDF Tools Installer, consulte estas instru\u00e7\u00f5es .","title":"Windows"},{"location":"#instalando-o-esp-idf-e-ferramentas","text":"Al\u00e9m do ESP-IDF, voc\u00ea tamb\u00e9m precisa instalar as ferramentas usadas pelo ESP-IDF, como compilador, depurador, pacotes Python, etc.","title":"Instalando O ESP-IDF e ferramentas"},{"location":"#windows_1","text":"O ESP-IDF Tools Installer para Windows apresentado no passo 1 instala todas as ferramentas necess\u00e1rias. Se voc\u00ea deseja instalar as ferramentas sem a ajuda do ESP-IDF Tools Installer, abra o Prompt de Comando e siga estas etapas: cd %userprofile%\\esp\\esp-idf install.bat Ou no Windows PowerShell cd ~/esp/esp-idf ./install.ps1","title":"Windows"},{"location":"#linux-e-macos_1","text":"No Linux ou macOS h\u00e1 um script para instala\u00e7\u00e3o.Abra o terminal e execute: cd ~/esp/esp-idf ./install.sh","title":"Linux e macOS"},{"location":"#configurando-as-variaveis-de-ambientes","text":"As ferramentas instaladas ainda n\u00e3o foram adicionadas \u00e0 vari\u00e1vel de ambiente PATH. Para tornar as ferramentas utiliz\u00e1veis na linha de comando, algumas vari\u00e1veis de ambiente devem ser definidas. ESP-IDF fornece alguns scripts que ajudam nesse processo.","title":"Configurando as vari\u00e1veis de ambientes"},{"location":"#windows_2","text":"O ESP-IDF Tools Installer para Windows cria um atalho \u201cESP-IDF Command Prompt\u201d no menu Iniciar. Este atalho abre o Prompt de Comando e configura todas as vari\u00e1veis de ambiente necess\u00e1rias. Voc\u00ea pode abrir este atalho e prosseguir para a pr\u00f3xima etapa. Caso n\u00e3o funcione e voc\u00ea precise configurar manualmente, execute os seguintes comandos: Prompt de Comando : %userprofile%\\esp\\esp-idf\\export.bat Windows PowerShell : .$HOME/esp/esp-idf/export.ps1","title":"Windows"},{"location":"#linux-e-macos_2","text":"No terminal execute: . $HOME/esp/esp-idf/export.sh Voc\u00ea precisa fazer isso toda vez que iniciar o terminal para usar o ESP-IDF.","title":"Linux e macOS"},{"location":"#passo-3-criando-um-novo-projeto","text":"Agora que j\u00e1 temos as ferramentas instaladas, vamos fazer um exemplo para validar o funcionamento das mesmas. Vamos executar o exemplo blink que j\u00e1 vem no IDF.","title":"Passo 3 - Criando um novo projeto"},{"location":"#copiando-um-projeto-exemplo","text":"Vamos copiar o projeto blink para preservarmos o exemplo presente na pasta do IDF:","title":"Copiando um projeto exemplo"},{"location":"#windows_3","text":"cd %userprofile%\\esp xcopy /e /i %IDF_PATH%\\examples\\get-started\\blink blink","title":"Windows"},{"location":"#linux-e-macos_3","text":"cd ~/esp cp -r $IDF_PATH/examples/get-started/blink . Fique a vontade para testar os outros exemplos tamb\u00e9m. O sistema de compila\u00e7\u00e3o ESP-IDF n\u00e3o oferece suporte a espa\u00e7os nos caminhos para o ESP-IDF ou para projetos.","title":"Linux e macOS"},{"location":"#configuracao","text":"Agora vamos configurar o target para qual ser\u00e1 compilado e j\u00e1 fazer uma configura\u00e7\u00e3o no menuconfig. No nosso caso vamos trabalhar com o ESP32-S2:","title":"Configura\u00e7\u00e3o"},{"location":"#windows_4","text":"cd %userprofile%\\esp\\blink idf.py set-target esp32s2 idf.py menuconfig","title":"Windows"},{"location":"#linux-e-macos_4","text":"cd ~/esp/blink idf.py set-target esp32s2 idf.py menuconfig Ser\u00e1 aberto o menuconfig: Acesse a op\u00e7\u00e3o Component config ---> Em seguida ESP System Settings ---> Agora selecione Channel for console output (Default: UART0) ---> E por fim, selecione (X) USB CDC: Salve(S), Enter, enter, Saia do menu(ESC) Essa configura\u00e7\u00e3o permitir\u00e1 que usemos a USB no pr\u00f3ximo upload. Sempre que iniciar um projeto novo fa\u00e7a essas configura\u00e7\u00e3o para que continue usando a USB como interface de programa\u00e7\u00e3o. Para mais detalhes acesse:","title":"Linux e macOS"},{"location":"#compilando-o-projeto-em-modo-dfu","text":"A primeira compila\u00e7\u00e3o n\u00f3s vamos fazer usando o modo DFU, que j\u00e1 vem por padr\u00e3o no ESP32-S2 permitindo o upload atrav\u00e9s da USB: Para crie a imagem DFU: idf.py dfu A primeira compila\u00e7\u00e3o pode demorar um pouco. Da at\u00e9 pra ir pegar um caf\u00e9 ;) Ap\u00f3s a compila\u00e7\u00e3o, conecte a Franzininho WiFi no computador. Antes de fazermos o upload \u00e9 necess\u00e1rio entrar no modo DFU. Para entrar no modo DFU pressione as teclas na seguinte sequencia: pressione e segure a tecla BOOT pressione rapidamente e solte a tecla presente solte a tecla BOOT Dessa forma a placa entrar\u00e1 no modo DFU e poder\u00e1 receber o firmware atrav\u00e9s da USB. Para fazer a grava\u00e7\u00e3o, digite: idf.py dfu-flash Caso tenha permiss\u00e3o de acesso a porta USB, acesse esse link com as instru\u00e7\u00f5es de configura\u00e7\u00f5es Ap\u00f3s alguns segundos a placa estar\u00e1 gravada.","title":"Compilando o projeto em modo DFU"},{"location":"#compilacao-gravacao-e-monitor-em-modo-normal","text":"Agora voc\u00ea poder\u00e1 compilar, gravar e monitorar usando a porta USB. Esse processo \u00e9 id\u00eantico ao que fazemos para desenvolver com o ESP32: Compilar: idf.py build Gravar: idf.py -p PORT [-b BAUD] flash Monitorar: idf.py -p /dev/ttyUSB0 monitor Maravilha, voc\u00ea configurou o ambiente para trabalhar com o ESP-IDF. Caso queira trabalhar com a extens\u00e3o para VSCODE, confira o video:","title":"Compila\u00e7\u00e3o, grava\u00e7\u00e3o e monitor em modo normal"},{"location":"0x01-Hello-world/","text":"Introdu\u00e7\u00e3o O artigo proposto dar\u00e1 in\u00edcio a uma s\u00e9rie de projetos utilizando o framework oficial da Espressif, o IDF. O objetivo deste artigo \u00e9 apresentar um exemplo de projeto que sirva como base para aqueles que est\u00e3o dando seus primeiros passos na fam\u00edlia de microcontroladores ESP32. Como \u00e9 de praxe na programa\u00e7\u00e3o sempre que iniciamos uma nova linguagem ou quando aprendemos sobre um novo processador o primeiro projeto a ser criado \u00e9 o \u201cOl\u00e1 Mundo\u201c, caso contr\u00e1rio teremos um eterno azar, ent\u00e3o o que acha de come\u00e7armos a estudar e apresentar nosso projeto ao Mundo? Ao final desse exemplo voc\u00ea saber\u00e1 como \u00e9 a estrutura b\u00e1sica de um programa no ESP-IDF e estar\u00e1 pronto para os pr\u00f3ximos passos. Recursos Necess\u00e1rios Para esse exemplo voc\u00ea precisar\u00e1 dos seguintes recursos: Placa Franzininho WiFi; Protoboard; LED; Resistor 220R ou 150R; Computador com ESP-IDF instalado e configurado(link) Desenvolvimento Nesse projeto foi utilizado a Franzininho WiFi, uma placa de desenvolvimento baseada no m\u00f3dulo ESP 32-S2 (Wroom ou Wrover), o qual faz parte de uma iniciativa open hardware para ensinar sobre programa\u00e7\u00e3o e eletr\u00f4nica aliando habilidades na soldagem de componentes eletr\u00f4nicos. Como mencionado, vamos fazer o Ol\u00e1 Mundo (Hello, World!), um programa base que tem como objetivo apresentar os recursos prim\u00e1rios do processador em estudo. Nesse primeiro projeto vamos explorar as GPIOs, configuradas como sa\u00edda digital, conectada a um LED externo para ligar e desligar numa frequ\u00eancia de 1 Hertz (1 segundo) e enviar alguns dados de sa\u00edda para serem mostrados no monitor do editor, para aqueles que est\u00e3o migrando do Arduino j\u00e1 est\u00e3o familiarizados com esse exemplo, o famoso \u201cBlink\u201d. Esquem\u00e1tico Antes de come\u00e7armos a escrever as primeiras linhas de c\u00f3digo vamos realizar a montagem do circuito, vale ressaltar que na placa Franzininho WiFi h\u00e1 um LED RGB on board endere\u00e7\u00e1vel, contudo ser\u00e1 utilizado um LED externo, conectado a GPIO 2 ,para o primeiro projeto, vamos nos familiarizarmos com os comandos b\u00e1sicos. Abaixo segue o esquem\u00e1tico proposto: C\u00f3digo O nosso c\u00f3digo possui uma estrutura bem simples e n\u00e3o \u00e9 necess\u00e1rio acrescentar nenhuma biblioteca. Ao criar um novo projeto no IDF j\u00e1 temos arquivos configurados e prontos para programa\u00e7\u00e3o do dispositivo, desta forma digite e comente as linhas do seguinte c\u00f3digo no arquivo main.c : /* Descri\u00e7\u00e3o: Exemplo que mostra Hello World utilizando quatro modalidade de sa\u00edda de dados por meio do terminal e interagindo com um LED externo para indica\u00e7\u00e3o de estado. Autor: Halysson Junior Data : 28/03/21 */ // Arquivos de cabe\u00e7alho #include <stdio.h> #include \"freertos/FreeRTOS.h\" #include \"freertos/task.h\" #include \"esp_system.h\" #include \"driver/gpio.h\" // Defini\u00e7\u00e3o de pino #define LED 2 // Vari\u00e1vel Global char status[2] = {'L','H'}; // Caracter para indicar estado do LED H- HIGH e L - LOW void app_main(void) // Main { gpio_pad_select_gpio(LED);// Mapeamento do pino LED gpio_set_direction(LED,GPIO_MODE_OUTPUT); // Defini\u00e7\u00e3o printf(\"Exemplo - Hello World \\n\");// Mostra informa\u00e7\u00e3o no terminal //Vari\u00e1veis Local bool i = 0 ; // Varia o estado l\u00f3gico do LED for (;;) {// Loop i= i^1; // Opera\u00e7\u00e3o l\u00f3gica XOR para alternar o estado do LED gpio_set_level(LED,i); // Envia os n\u00edveis l\u00f3gicos 1 ou 0 printf(\"Hello World, i am Franzininho WiFi ----> LED status : %c \\n\", status[i]); vTaskDelay(1000 / portTICK_PERIOD_MS); // Rotina de Delay de 1 segundo fflush(stdout); // Descarrega os buffers de sa\u00edda de dados }// end Loop }// end Main Voc\u00ea encontra o projeto completo na documenta\u00e7\u00e3o da Franzininho: Hello_World Caso ainda n\u00e3o tenha instalado e configurado o IDF no seu computador ou tem d\u00favidas sobre as ferramentas, acesse o tutorial de instala\u00e7\u00e3o Compila\u00e7\u00e3o Ap\u00f3s a codifica\u00e7\u00e3o vamos compilar o c\u00f3digo, mas antes selecione o set target para ESP 32-S2. idf.py set-target esp32s2 Ao final da compila\u00e7\u00e3o o resultado final deve ser semelhante \u00e0 imagem mostrada abaixo, em caso de erros retorne os passos anteriores e revise seu c\u00f3digo. Agora vamos enviar o c\u00f3digo fonte para nossa placa, no editor vamos pressionar o \u00edcone abaixo e aguarde alguns segundos para assim dar in\u00edcio ao programa \u201cOl\u00e1 Mundo\u201d. Para vermos a sa\u00edda de dados do nosso projeto clique no \u00edcone apresentado abaixo. Resultados Com a finaliza\u00e7\u00e3o do projeto o leitor observou que utilizamos uma estrutura\u00e7\u00e3o da linguagem C (main(), printf, fflush()), la\u00e7os de repeti\u00e7\u00e3o (for()) e alguns tipos de vari\u00e1veis primitivas (int e char) para formar nosso c\u00f3digo . Aliados a isso utilizamos labels nativas do IDF para definir os pinos de entrada ou sa\u00edda digital (GPIO_MODE_OUTPUT ). Abaixo segue o resultado final dos dados de sa\u00edda : Abaixo segue o nosso circuito do nosso projeto: Portanto, a partir deste projeto \u00e9 poss\u00edvel aplicar a l\u00f3gica estruturada no c\u00f3digo em diversos outros tipos de sensores, por exemplo : sensor de vibra\u00e7\u00e3o, sensor infravermelho, sensor de som e outros sensores digitais comumente comercializados. Conclus\u00e3o Nesse projeto apresentamos os conceitos b\u00e1sicos para aqueles que desejam dar o pontap\u00e9 inicial nos estudos sobre o IDF, contudo aconselhamos aos leitores a modificar o c\u00f3digo no intuito de revisar a linguagem C e fixar algumas fun\u00e7\u00f5es nativas, os quais ser\u00e3o normalmente utilizadas em outros projetos tamb\u00e9m n\u00e3o limitar-se apenas aos perif\u00e9ricos GPIOs do microcontrolador, pois o ESP32-S2 possui diversos recursos tanto em hardware quanto em software. Desta forma o artigo servir\u00e1 de acervo aos leitores para relembrar conceitos espec\u00edficos e aprimorar os que j\u00e1 possuem. Autor Halysson Junior Data: 13/05/2021","title":"Hello, World\""},{"location":"0x01-Hello-world/#introducao","text":"O artigo proposto dar\u00e1 in\u00edcio a uma s\u00e9rie de projetos utilizando o framework oficial da Espressif, o IDF. O objetivo deste artigo \u00e9 apresentar um exemplo de projeto que sirva como base para aqueles que est\u00e3o dando seus primeiros passos na fam\u00edlia de microcontroladores ESP32. Como \u00e9 de praxe na programa\u00e7\u00e3o sempre que iniciamos uma nova linguagem ou quando aprendemos sobre um novo processador o primeiro projeto a ser criado \u00e9 o \u201cOl\u00e1 Mundo\u201c, caso contr\u00e1rio teremos um eterno azar, ent\u00e3o o que acha de come\u00e7armos a estudar e apresentar nosso projeto ao Mundo? Ao final desse exemplo voc\u00ea saber\u00e1 como \u00e9 a estrutura b\u00e1sica de um programa no ESP-IDF e estar\u00e1 pronto para os pr\u00f3ximos passos.","title":"Introdu\u00e7\u00e3o"},{"location":"0x01-Hello-world/#recursos-necessarios","text":"Para esse exemplo voc\u00ea precisar\u00e1 dos seguintes recursos: Placa Franzininho WiFi; Protoboard; LED; Resistor 220R ou 150R; Computador com ESP-IDF instalado e configurado(link)","title":"Recursos Necess\u00e1rios"},{"location":"0x01-Hello-world/#desenvolvimento","text":"Nesse projeto foi utilizado a Franzininho WiFi, uma placa de desenvolvimento baseada no m\u00f3dulo ESP 32-S2 (Wroom ou Wrover), o qual faz parte de uma iniciativa open hardware para ensinar sobre programa\u00e7\u00e3o e eletr\u00f4nica aliando habilidades na soldagem de componentes eletr\u00f4nicos. Como mencionado, vamos fazer o Ol\u00e1 Mundo (Hello, World!), um programa base que tem como objetivo apresentar os recursos prim\u00e1rios do processador em estudo. Nesse primeiro projeto vamos explorar as GPIOs, configuradas como sa\u00edda digital, conectada a um LED externo para ligar e desligar numa frequ\u00eancia de 1 Hertz (1 segundo) e enviar alguns dados de sa\u00edda para serem mostrados no monitor do editor, para aqueles que est\u00e3o migrando do Arduino j\u00e1 est\u00e3o familiarizados com esse exemplo, o famoso \u201cBlink\u201d.","title":"Desenvolvimento"},{"location":"0x01-Hello-world/#esquematico","text":"Antes de come\u00e7armos a escrever as primeiras linhas de c\u00f3digo vamos realizar a montagem do circuito, vale ressaltar que na placa Franzininho WiFi h\u00e1 um LED RGB on board endere\u00e7\u00e1vel, contudo ser\u00e1 utilizado um LED externo, conectado a GPIO 2 ,para o primeiro projeto, vamos nos familiarizarmos com os comandos b\u00e1sicos. Abaixo segue o esquem\u00e1tico proposto:","title":"Esquem\u00e1tico"},{"location":"0x01-Hello-world/#codigo","text":"O nosso c\u00f3digo possui uma estrutura bem simples e n\u00e3o \u00e9 necess\u00e1rio acrescentar nenhuma biblioteca. Ao criar um novo projeto no IDF j\u00e1 temos arquivos configurados e prontos para programa\u00e7\u00e3o do dispositivo, desta forma digite e comente as linhas do seguinte c\u00f3digo no arquivo main.c : /* Descri\u00e7\u00e3o: Exemplo que mostra Hello World utilizando quatro modalidade de sa\u00edda de dados por meio do terminal e interagindo com um LED externo para indica\u00e7\u00e3o de estado. Autor: Halysson Junior Data : 28/03/21 */ // Arquivos de cabe\u00e7alho #include <stdio.h> #include \"freertos/FreeRTOS.h\" #include \"freertos/task.h\" #include \"esp_system.h\" #include \"driver/gpio.h\" // Defini\u00e7\u00e3o de pino #define LED 2 // Vari\u00e1vel Global char status[2] = {'L','H'}; // Caracter para indicar estado do LED H- HIGH e L - LOW void app_main(void) // Main { gpio_pad_select_gpio(LED);// Mapeamento do pino LED gpio_set_direction(LED,GPIO_MODE_OUTPUT); // Defini\u00e7\u00e3o printf(\"Exemplo - Hello World \\n\");// Mostra informa\u00e7\u00e3o no terminal //Vari\u00e1veis Local bool i = 0 ; // Varia o estado l\u00f3gico do LED for (;;) {// Loop i= i^1; // Opera\u00e7\u00e3o l\u00f3gica XOR para alternar o estado do LED gpio_set_level(LED,i); // Envia os n\u00edveis l\u00f3gicos 1 ou 0 printf(\"Hello World, i am Franzininho WiFi ----> LED status : %c \\n\", status[i]); vTaskDelay(1000 / portTICK_PERIOD_MS); // Rotina de Delay de 1 segundo fflush(stdout); // Descarrega os buffers de sa\u00edda de dados }// end Loop }// end Main Voc\u00ea encontra o projeto completo na documenta\u00e7\u00e3o da Franzininho: Hello_World Caso ainda n\u00e3o tenha instalado e configurado o IDF no seu computador ou tem d\u00favidas sobre as ferramentas, acesse o tutorial de instala\u00e7\u00e3o","title":"C\u00f3digo"},{"location":"0x01-Hello-world/#compilacao","text":"Ap\u00f3s a codifica\u00e7\u00e3o vamos compilar o c\u00f3digo, mas antes selecione o set target para ESP 32-S2. idf.py set-target esp32s2 Ao final da compila\u00e7\u00e3o o resultado final deve ser semelhante \u00e0 imagem mostrada abaixo, em caso de erros retorne os passos anteriores e revise seu c\u00f3digo. Agora vamos enviar o c\u00f3digo fonte para nossa placa, no editor vamos pressionar o \u00edcone abaixo e aguarde alguns segundos para assim dar in\u00edcio ao programa \u201cOl\u00e1 Mundo\u201d. Para vermos a sa\u00edda de dados do nosso projeto clique no \u00edcone apresentado abaixo.","title":"Compila\u00e7\u00e3o"},{"location":"0x01-Hello-world/#resultados","text":"Com a finaliza\u00e7\u00e3o do projeto o leitor observou que utilizamos uma estrutura\u00e7\u00e3o da linguagem C (main(), printf, fflush()), la\u00e7os de repeti\u00e7\u00e3o (for()) e alguns tipos de vari\u00e1veis primitivas (int e char) para formar nosso c\u00f3digo . Aliados a isso utilizamos labels nativas do IDF para definir os pinos de entrada ou sa\u00edda digital (GPIO_MODE_OUTPUT ). Abaixo segue o resultado final dos dados de sa\u00edda :","title":"Resultados"},{"location":"0x01-Hello-world/#abaixo-segue-o-nosso-circuito-do-nosso-projeto","text":"Portanto, a partir deste projeto \u00e9 poss\u00edvel aplicar a l\u00f3gica estruturada no c\u00f3digo em diversos outros tipos de sensores, por exemplo : sensor de vibra\u00e7\u00e3o, sensor infravermelho, sensor de som e outros sensores digitais comumente comercializados.","title":"Abaixo segue o nosso circuito do nosso projeto:"},{"location":"0x01-Hello-world/#conclusao","text":"Nesse projeto apresentamos os conceitos b\u00e1sicos para aqueles que desejam dar o pontap\u00e9 inicial nos estudos sobre o IDF, contudo aconselhamos aos leitores a modificar o c\u00f3digo no intuito de revisar a linguagem C e fixar algumas fun\u00e7\u00f5es nativas, os quais ser\u00e3o normalmente utilizadas em outros projetos tamb\u00e9m n\u00e3o limitar-se apenas aos perif\u00e9ricos GPIOs do microcontrolador, pois o ESP32-S2 possui diversos recursos tanto em hardware quanto em software. Desta forma o artigo servir\u00e1 de acervo aos leitores para relembrar conceitos espec\u00edficos e aprimorar os que j\u00e1 possuem. Autor Halysson Junior Data: 13/05/2021","title":"Conclus\u00e3o"},{"location":"about/","text":"Sobre","title":"Sobre"},{"location":"about/#sobre","text":"","title":"Sobre"}]}